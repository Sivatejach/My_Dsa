


Basic Data Structure Related Questions
What is an Array?
A collection of elements stored in contiguous memory, indexed-based.

What is a LinkedList?
A sequence of nodes where each node points to the next. It allows dynamic memory allocation.

What is a Stack?
Follows LIFO (Last In First Out) â€“ like a pile of books. Methods: push(), pop(), peek().

What is a Queue?
Follows FIFO (First In First Out) â€“ like people in a line. Methods: add(), remove(), peek().

Difference between Array and ArrayList?
Arrays are fixed size, ArrayLists are resizable.
Arrays can hold primitives; ArrayLists can only hold objects.





Explain Treeify in Java



This improves lookup performance from O(n) to O(log n) in case of hash collisions.

Why?
To reduce the time complexity of get()/put() operations in high-collision scenarios.







Explain Predicates in Java
Predicate is a functional interface introduced in Java 8 (in java.util.function package).

It represents a boolean-valued function of one argument.
|import java.util.function.Predicate;

public class PredicateExample {
    public static void main(String[] args) {
        Predicate<Integer> isEven = num -> num % 2 == 0;
        System.out.println(isEven.test(10)); // true
        System.out.println(isEven.test(13)); // false
    }
}








Lambda Function in Java and Python
Java:
A lambda expression is a shorthand for implementing a functional interface.

java
(a, b) -> a + b
Example with Predicate:
java:
Predicate<Integer> isEven = x -> x % 2 == 0;

Python:
Anonymous function defined using lambda keyword.
python:
add = lambda x, y: x + y
print(add(2, 3))  # Output: 5








append() vs extend() in Python
append() adds one item to the end of a list:

python
l = [1, 2]
l.append([3, 4])
print(l)  # [1, 2, [3, 4]]
extend() adds each item from an iterable to the list:

python
l = [1, 2]
l.extend([3, 4])
print(l)  # [1, 2, 3, 4]






 Python Program to Sort and Merge Two Lists

list1 = [4, 2, 7]
list2 = [5, 1, 3]

# Merge
merged = list1 + list2

# Sort
merged.sort()

print("Merged and Sorted List:", merged)






SQL Joins:
SELECT e.name, d.name
FROM employee e
INNER JOIN department d ON e.dept_id = d.id;



 DELETE vs TRUNCATE in SQL
DELETE:
- Removes rows based on a condition.
- Can be rolled back.
- Slower for large datasets.
- Triggers are fired.

TRUNCATE:
- Removes all rows from a table.
- Cannot be rolled back.
- Faster for large datasets.
- Does not fire triggers.




A copy constructor is a special constructor used to create a new object by copying another object of the same class.

class Student {
    String name;
    int age;

    // Parameterized constructor
    Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Copy constructor
    Student(Student s) {
        this.name = s.name;
        this.age = s.age;
    }

    void display() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

public class Main {
    public static void main(String[] args) {
        Student s1 = new Student("Alice", 20);
        Student s2 = new Student(s1);  // Using copy constructor

        s1.display();  // Name: Alice, Age: 20
        s2.display();  // Name: Alice, Age: 20
    }
}





stRINGbUILDER AND stringBuffer
Both StringBuilder and StringBuffer are mutable classes in Java used to create and manipulate strings more efficiently than String when many modifications (like append, insert, delete) are needed.

ðŸ”¹ StringBuffer:
A thread-safe, mutable sequence of characters.

All methods are synchronized, so it is safe to use in multi-threaded programs.

However, due to synchronization, it's a bit slower than StringBuilder.

Example:
java
Copy
Edit
StringBuffer sb = new StringBuffer("Hello");
sb.append(" Java");
System.out.println(sb);  // Output: Hello Java
ðŸ”¹ StringBuilder:
A non-thread-safe, mutable sequence of characters.

Methods are not synchronized, making it faster than StringBuffer in single-threaded environments.

Introduced in Java 1.5.

Example:
java
Copy
Edit
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb);  // Output: Hello World





throw is for actually throwing an exception.
throws is for declaring potential exceptions a method might throw.

public class ThrowThrowsExample {

    // Method that declares it might throw an exception
    static void validateAge(int age) throws IllegalArgumentException {
        if (age < 18) {
            // Actually throwing an exception
            throw new IllegalArgumentException("Age must be 18 or above");
        } else {
            System.out.println("Access granted - Age is valid!");
        }
    }

    public static void main(String[] args) {
        try {
            validateAge(16);  // This will throw an exception
        } catch (IllegalArgumentException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}
